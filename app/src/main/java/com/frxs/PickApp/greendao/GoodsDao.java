package com.frxs.PickApp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS".
*/
public class GoodsDao extends AbstractDao<Goods, Long> {

    public static final String TABLENAME = "GOODS";

    /**
     * Properties of entity Goods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ID = new Property(1, String.class, "ID", false, "ID");
        public final static Property OrderID = new Property(2, String.class, "OrderID", false, "ORDER_ID");
        public final static Property ProductID = new Property(3, Integer.class, "ProductID", false, "PRODUCT_ID");
        public final static Property SKU = new Property(4, String.class, "SKU", false, "SKU");
        public final static Property ProductName = new Property(5, String.class, "ProductName", false, "PRODUCT_NAME");
        public final static Property BarCode = new Property(6, String.class, "BarCode", false, "BAR_CODE");
        public final static Property ProductImageUrl400 = new Property(7, String.class, "ProductImageUrl400", false, "PRODUCT_IMAGE_URL400");
        public final static Property ShelfAreaID = new Property(8, Integer.class, "ShelfAreaID", false, "SHELF_AREA_ID");
        public final static Property ShelfCode = new Property(9, String.class, "ShelfCode", false, "SHELF_CODE");
        public final static Property SaleQty = new Property(10, double.class, "SaleQty", false, "SALE_QTY");
        public final static Property SaleUnit = new Property(11, String.class, "SaleUnit", false, "SALE_UNIT");
        public final static Property SalePackingQty = new Property(12, double.class, "SalePackingQty", false, "SALE_PACKING_QTY");
        public final static Property PickQty = new Property(13, double.class, "PickQty", false, "PICK_QTY");
        public final static Property Remark = new Property(14, String.class, "Remark", false, "REMARK");
        public final static Property PreQty = new Property(15, double.class, "PreQty", false, "PRE_QTY");
        public final static Property SalePrice = new Property(16, double.class, "SalePrice", false, "SALE_PRICE");
        public final static Property Unit = new Property(17, String.class, "Unit", false, "UNIT");
        public final static Property UnitQty = new Property(18, double.class, "UnitQty", false, "UNIT_QTY");
        public final static Property UnitPrice = new Property(19, double.class, "UnitPrice", false, "UNIT_PRICE");
        public final static Property IsGiftStr = new Property(20, String.class, "IsGiftStr", false, "IS_GIFT_STR");
        public final static Property PickTime = new Property(21, String.class, "PickTime", false, "PICK_TIME");
        public final static Property BigUnitBarCode = new Property(22, String.class, "BigUnitBarCode", false, "BIG_UNIT_BAR_CODE");
        public final static Property IsPicked = new Property(23, int.class, "IsPicked", false, "IS_PICKED");
        public final static Property PickPackingQty = new Property(24, double.class, "pickPackingQty", false, "PICK_PACKING_QTY");
        public final static Property PickUnit = new Property(25, String.class, "pickUnit", false, "PICK_UNIT");
    }


    public GoodsDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID\" TEXT," + // 1: ID
                "\"ORDER_ID\" TEXT," + // 2: OrderID
                "\"PRODUCT_ID\" INTEGER," + // 3: ProductID
                "\"SKU\" TEXT," + // 4: SKU
                "\"PRODUCT_NAME\" TEXT," + // 5: ProductName
                "\"BAR_CODE\" TEXT," + // 6: BarCode
                "\"PRODUCT_IMAGE_URL400\" TEXT," + // 7: ProductImageUrl400
                "\"SHELF_AREA_ID\" INTEGER," + // 8: ShelfAreaID
                "\"SHELF_CODE\" TEXT," + // 9: ShelfCode
                "\"SALE_QTY\" REAL NOT NULL ," + // 10: SaleQty
                "\"SALE_UNIT\" TEXT," + // 11: SaleUnit
                "\"SALE_PACKING_QTY\" REAL NOT NULL ," + // 12: SalePackingQty
                "\"PICK_QTY\" REAL NOT NULL ," + // 13: PickQty
                "\"REMARK\" TEXT," + // 14: Remark
                "\"PRE_QTY\" REAL NOT NULL ," + // 15: PreQty
                "\"SALE_PRICE\" REAL NOT NULL ," + // 16: SalePrice
                "\"UNIT\" TEXT," + // 17: Unit
                "\"UNIT_QTY\" REAL NOT NULL ," + // 18: UnitQty
                "\"UNIT_PRICE\" REAL NOT NULL ," + // 19: UnitPrice
                "\"IS_GIFT_STR\" TEXT," + // 20: IsGiftStr
                "\"PICK_TIME\" TEXT," + // 21: PickTime
                "\"BIG_UNIT_BAR_CODE\" TEXT," + // 22: BigUnitBarCode
                "\"IS_PICKED\" INTEGER NOT NULL ," + // 23: IsPicked
                "\"PICK_PACKING_QTY\" REAL NOT NULL ," + // 24: pickPackingQty
                "\"PICK_UNIT\" TEXT);"); // 25: pickUnit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Goods entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String OrderID = entity.getOrderID();
        if (OrderID != null) {
            stmt.bindString(3, OrderID);
        }
 
        Integer ProductID = entity.getProductID();
        if (ProductID != null) {
            stmt.bindLong(4, ProductID);
        }
 
        String SKU = entity.getSKU();
        if (SKU != null) {
            stmt.bindString(5, SKU);
        }
 
        String ProductName = entity.getProductName();
        if (ProductName != null) {
            stmt.bindString(6, ProductName);
        }
 
        String BarCode = entity.getBarCode();
        if (BarCode != null) {
            stmt.bindString(7, BarCode);
        }
 
        String ProductImageUrl400 = entity.getProductImageUrl400();
        if (ProductImageUrl400 != null) {
            stmt.bindString(8, ProductImageUrl400);
        }
 
        Integer ShelfAreaID = entity.getShelfAreaID();
        if (ShelfAreaID != null) {
            stmt.bindLong(9, ShelfAreaID);
        }
 
        String ShelfCode = entity.getShelfCode();
        if (ShelfCode != null) {
            stmt.bindString(10, ShelfCode);
        }
        stmt.bindDouble(11, entity.getSaleQty());
 
        String SaleUnit = entity.getSaleUnit();
        if (SaleUnit != null) {
            stmt.bindString(12, SaleUnit);
        }
        stmt.bindDouble(13, entity.getSalePackingQty());
        stmt.bindDouble(14, entity.getPickQty());
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(15, Remark);
        }
        stmt.bindDouble(16, entity.getPreQty());
        stmt.bindDouble(17, entity.getSalePrice());
 
        String Unit = entity.getUnit();
        if (Unit != null) {
            stmt.bindString(18, Unit);
        }
        stmt.bindDouble(19, entity.getUnitQty());
        stmt.bindDouble(20, entity.getUnitPrice());
 
        String IsGiftStr = entity.getIsGiftStr();
        if (IsGiftStr != null) {
            stmt.bindString(21, IsGiftStr);
        }
 
        String PickTime = entity.getPickTime();
        if (PickTime != null) {
            stmt.bindString(22, PickTime);
        }
 
        String BigUnitBarCode = entity.getBigUnitBarCode();
        if (BigUnitBarCode != null) {
            stmt.bindString(23, BigUnitBarCode);
        }
        stmt.bindLong(24, entity.getIsPicked());
        stmt.bindDouble(25, entity.getPickPackingQty());
 
        String pickUnit = entity.getPickUnit();
        if (pickUnit != null) {
            stmt.bindString(26, pickUnit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Goods entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String OrderID = entity.getOrderID();
        if (OrderID != null) {
            stmt.bindString(3, OrderID);
        }
 
        Integer ProductID = entity.getProductID();
        if (ProductID != null) {
            stmt.bindLong(4, ProductID);
        }
 
        String SKU = entity.getSKU();
        if (SKU != null) {
            stmt.bindString(5, SKU);
        }
 
        String ProductName = entity.getProductName();
        if (ProductName != null) {
            stmt.bindString(6, ProductName);
        }
 
        String BarCode = entity.getBarCode();
        if (BarCode != null) {
            stmt.bindString(7, BarCode);
        }
 
        String ProductImageUrl400 = entity.getProductImageUrl400();
        if (ProductImageUrl400 != null) {
            stmt.bindString(8, ProductImageUrl400);
        }
 
        Integer ShelfAreaID = entity.getShelfAreaID();
        if (ShelfAreaID != null) {
            stmt.bindLong(9, ShelfAreaID);
        }
 
        String ShelfCode = entity.getShelfCode();
        if (ShelfCode != null) {
            stmt.bindString(10, ShelfCode);
        }
        stmt.bindDouble(11, entity.getSaleQty());
 
        String SaleUnit = entity.getSaleUnit();
        if (SaleUnit != null) {
            stmt.bindString(12, SaleUnit);
        }
        stmt.bindDouble(13, entity.getSalePackingQty());
        stmt.bindDouble(14, entity.getPickQty());
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(15, Remark);
        }
        stmt.bindDouble(16, entity.getPreQty());
        stmt.bindDouble(17, entity.getSalePrice());
 
        String Unit = entity.getUnit();
        if (Unit != null) {
            stmt.bindString(18, Unit);
        }
        stmt.bindDouble(19, entity.getUnitQty());
        stmt.bindDouble(20, entity.getUnitPrice());
 
        String IsGiftStr = entity.getIsGiftStr();
        if (IsGiftStr != null) {
            stmt.bindString(21, IsGiftStr);
        }
 
        String PickTime = entity.getPickTime();
        if (PickTime != null) {
            stmt.bindString(22, PickTime);
        }
 
        String BigUnitBarCode = entity.getBigUnitBarCode();
        if (BigUnitBarCode != null) {
            stmt.bindString(23, BigUnitBarCode);
        }
        stmt.bindLong(24, entity.getIsPicked());
        stmt.bindDouble(25, entity.getPickPackingQty());
 
        String pickUnit = entity.getPickUnit();
        if (pickUnit != null) {
            stmt.bindString(26, pickUnit);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Goods readEntity(Cursor cursor, int offset) {
        Goods entity = new Goods( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // OrderID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ProductID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SKU
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ProductName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BarCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ProductImageUrl400
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ShelfAreaID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ShelfCode
            cursor.getDouble(offset + 10), // SaleQty
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // SaleUnit
            cursor.getDouble(offset + 12), // SalePackingQty
            cursor.getDouble(offset + 13), // PickQty
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Remark
            cursor.getDouble(offset + 15), // PreQty
            cursor.getDouble(offset + 16), // SalePrice
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // Unit
            cursor.getDouble(offset + 18), // UnitQty
            cursor.getDouble(offset + 19), // UnitPrice
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // IsGiftStr
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // PickTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // BigUnitBarCode
            cursor.getInt(offset + 23), // IsPicked
            cursor.getDouble(offset + 24), // pickPackingQty
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // pickUnit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Goods entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSKU(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBarCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProductImageUrl400(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShelfAreaID(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setShelfCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSaleQty(cursor.getDouble(offset + 10));
        entity.setSaleUnit(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSalePackingQty(cursor.getDouble(offset + 12));
        entity.setPickQty(cursor.getDouble(offset + 13));
        entity.setRemark(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPreQty(cursor.getDouble(offset + 15));
        entity.setSalePrice(cursor.getDouble(offset + 16));
        entity.setUnit(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUnitQty(cursor.getDouble(offset + 18));
        entity.setUnitPrice(cursor.getDouble(offset + 19));
        entity.setIsGiftStr(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPickTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setBigUnitBarCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIsPicked(cursor.getInt(offset + 23));
        entity.setPickPackingQty(cursor.getDouble(offset + 24));
        entity.setPickUnit(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Goods entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Goods entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Goods entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
